name: Security Analysis

on: [pull_request]
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

jobs:
  grype:
    name: Grype Repo Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Scan current project
        uses: anchore/scan-action@v3
        with:
          path: "."
          output-format: table
      - name: Scan current project
        uses: anchore/scan-action@v3
        if: always()
        id: scan
        with:
          severity-cutoff: high
          path: "."
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}

  grype-image:
    name: Grype Image Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Build the Container image
        run: docker build . --file Dockerfile --tag localbuild/todo-app:v1
      - uses: anchore/scan-action@v3
        id: scan
        with:
          image: "localbuild/todo-app:v1"
          output-format: table

  grype-sbom:
    name: Grype SBOM Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Install CycloneDX CLI
        run: npm install --global @cyclonedx/cyclonedx-npm
      - name: Generate SBOM file
        run: npx @cyclonedx/cyclonedx-npm --output-file sbom.json
      - name: Scan SBOM
        uses: anchore/scan-action@v3
        with:
          sbom: "sbom.json"
          output-format: table
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sbom
          path: sbom.json
  
  bearer:
    name: Bearer Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Run Report
        id: report
        uses: bearer/bearer-action@v2

  trivy:
    name: Trivy Scanner
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build an image from Dockerfile
        run: docker build . --file Dockerfile --tag localbuild/todo-app:v1
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: localbuild/todo-app:v1
          format: 'sarif'
          exit-code: '1'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          scanners: 'vuln,secret'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
